 *****method1 == 2 stack method******************
 int findMaxLen(string s) {
        // code here
        stack <int>idx;
        stack<char>ch;
        idx.push(-1);
        int n=s.size();
        int ans=0;
        for(int i=0;i<n;i++){
            if(s[i]=='('){
                ch.push('(');
                idx.push(i);
            }
            else{
                if(ch.size()){ch.pop();
                idx.pop();
                 ans=max(ans,i-idx.top());
                    
                }
                
                else{
                    idx.push(i);
                }
            }
        }
        return ans;
    }
    
    ************1 stack method*******************
    
    int longestValidParentheses(string s) {
        //1 stack approach
        stack<int>ind;
        int ans=0;
        ind.push(-1);
        for(int i=0;i<s.size();i++){
             if(s[i]=='('){
               ind.push(i);
             }
            else if(ind.top()!=-1&&s[i]==')'){
                   if(s[ind.top()]=='('){
                         ind.pop();
                       ans=max(ans,i-ind.top());
                     
                   }
                else ind.push(i);
                 }
             else if(ind.top()==-1&&s[i]==')'){
                   ind.push(i);
            }
         }
        return ans;
    }
    
    ////**************************     O(1) approach    ***********************////
     int longestValidParentheses(string s){
             int left=0,right=0;
         int n=s.size();
         int ans=0;
          for(int i=0;i<n;i++){
             if(s[i]=='(')left++;
             else right++;
             if(left==right)ans=max(ans,left+right);
              else if(right>left)left=right=0;
          }
         left=0,right=0;
             for(int i=n-1;i>=0;i--){
                 if(s[i]=='(')left++;
                 else right++;
                 if(left==right)ans=max(ans,left+right);
                 else if(left>right)left=right=0;
             }
     return ans;
     }
